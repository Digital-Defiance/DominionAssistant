// scripts/nx-compatible-capacitor.js
import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url'; // Needed for __dirname equivalent in ES Modules

// Configuration
const __filename = fileURLToPath(import.meta.url); // ES Module equivalent for __filename
const __dirname = path.dirname(__filename); // ES Module equivalent for __dirname
const appName = 'dominion-assistant'; // This seems to be the Nx project name
// const desiredAppName = 'Unofficial Dominion Assistant'; // REMOVED - No longer used here
const nxBuildDir = path.join(__dirname, '../dist', appName); // Where Nx builds to
// const capacitorWebDir = path.join(__dirname, '../dist', 'capacitor-app'); // REMOVED - We will use nxBuildDir directly
const androidDir = path.join(__dirname, '../android');
const iosAppDir = path.join(__dirname, '../ios/App'); // Correct path for manual pod install
const capacitorPluginsDir = path.join(androidDir, 'capacitor-cordova-android-plugins');

console.log('Starting Nx compatible Capacitor setup...');

// Step 1: Attempt to build with Nx
console.log('Attempting Nx build...');
try {
  execSync('nx build ' + appName, { stdio: 'inherit' });
  console.log('Nx build completed successfully');
} catch (error) {
  console.error('Nx build failed:', error);
  console.log('Attempting alternative build command...');
  try {
    execSync('yarn build', { stdio: 'inherit' });
    console.log('Yarn build completed successfully');
  } catch {
    console.error('All build attempts failed. Proceeding with existing build if available.');
  }
}

// Step 2: Check if the Nx build produced output
if (fs.existsSync(nxBuildDir) && fs.readdirSync(nxBuildDir).length > 0) {
  console.log(`Nx build output found at ${nxBuildDir}`);
  // REMOVED: Copying to capacitorWebDir and injecting debug script
  // REMOVED: Fallback logic for missing build output (assuming build works)
} else {
  console.error('Error: No Nx build output found at ' + nxBuildDir + '! Aborting.');
  process.exit(1); // Exit if build failed
}

// Step 3: Update Capacitor config - REMOVED
// console.log('Updating Capacitor configuration...');
// We will rely on the existing capacitor.config.ts which should be correct now

// Step 4: Add Android platform if it doesn't exist
if (!fs.existsSync(androidDir)) {
  console.log('Adding Android platform...');
  try {
    execSync('npx cap add android', { stdio: 'inherit' });
  } catch (error) {
    console.error('Failed to add Android platform:', error);
  }
}

// Step 5: Create necessary Gradle files
if (fs.existsSync(capacitorPluginsDir)) {
  console.log('Creating plugin configuration files...');
  const cordovaVarsPath = path.join(capacitorPluginsDir, 'cordova.variables.gradle');
  if (!fs.existsSync(cordovaVarsPath)) {
    fs.writeFileSync(cordovaVarsPath, '// This file is intentionally empty');
  }
  const buildExtrasPath = path.join(
    capacitorPluginsDir,
    'capacitor-cordova-android-plugins-build-extras.gradle'
  );
  if (!fs.existsSync(buildExtrasPath)) {
    fs.writeFileSync(
      buildExtrasPath,
      '// This file is automatically generated.\n// Do not modify - YOUR CHANGES WILL BE ERASED!'
    );
  }
  const buildGradlePath = path.join(capacitorPluginsDir, 'build.gradle');
  if (!fs.existsSync(buildGradlePath)) {
    const buildGradleContent = `buildscript { repositories { google(); mavenCentral() } dependencies { classpath 'com.android.tools.build:gradle:7.3.1' } } apply plugin: 'com.android.library' android { namespace "capacitor.cordova.android.plugins"; compileSdkVersion project.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 33; defaultConfig { minSdkVersion project.hasProperty('minSdkVersion') ? rootProject.ext.minSdkVersion : 23; targetSdkVersion project.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 33; versionCode 1; versionName "1.0" } buildTypes { release { minifyEnabled false; proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' } } compileOptions { sourceCompatibility JavaVersion.VERSION_1_8; targetCompatibility JavaVersion.VERSION_1_8 } } repositories { google(); mavenCentral() } dependencies { implementation fileTree(dir: 'libs', include: ['*.jar']); implementation "androidx.appcompat:appcompat:1.6.1" } if (file('capacitor-cordova-android-plugins-build-extras.gradle').exists()) { apply from: 'capacitor-cordova-android-plugins-build-extras.gradle' }`;
    fs.writeFileSync(buildGradlePath, buildGradleContent);
  }
}

// Step 6: Create variables.gradle in android directory
if (fs.existsSync(androidDir)) {
  const variablesGradlePath = path.join(androidDir, 'variables.gradle');
  if (!fs.existsSync(variablesGradlePath)) {
    console.log('Creating variables.gradle...');
    const variablesContent = `ext { minSdkVersion = 23; compileSdkVersion = 33; targetSdkVersion = 33; androidxActivityVersion = '1.4.0'; androidxAppCompatVersion = '1.4.2'; androidxCoordinatorLayoutVersion = '1.2.0'; androidxCoreVersion = '1.8.0'; androidxFragmentVersion = '1.4.1'; junitVersion = '4.13.2'; androidxJunitVersion = '1.1.5'; androidxEspressoCoreVersion = '3.5.1'; cordovaAndroidVersion = '10.1.1' }`;
    fs.writeFileSync(variablesGradlePath, variablesContent);
  }
}

// Step 7: Run manual pod install
if (fs.existsSync(path.join(iosAppDir, 'Podfile'))) {
  console.log(`Running pod install manually in ${iosAppDir}...`);
  try {
    execSync('pod install', { cwd: iosAppDir, stdio: 'inherit' });
    console.log('Manual pod install completed.');
  } catch (podError) {
    console.error('Manual pod install failed:', podError);
  }
} else {
  console.log('Podfile not found in correct location, skipping manual pod install.');
}

// Step 8: Run Capacitor copy
console.log('Running Capacitor copy...');
try {
  execSync('npx cap copy', { stdio: 'inherit' });
  console.log('Capacitor copy successful');
} catch (error) {
  console.error('Copy failed:', error);
}

console.log('\nSetup complete! You can now open the native project:');
console.log('  npx cap open android');
console.log('  npx cap open ios'); // Corrected instruction

// Helper function to recursively copy directories - REMOVED as it's no longer needed
// function copyDirRecursive(src, dest) { ... }
